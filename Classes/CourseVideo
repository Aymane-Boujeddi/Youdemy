<?php
require_once "Course";
class CourseVideo extends Course
{
    private $contentType;
    private $videoContent;

    public function __construct($title, $category, $description, $teacherID, $type, $content)
    {
        parent::__construct($title, $category, $description, $teacherID);
        $this->contentType = $type;
        $this->videoContent = $content;
    }
    public function getErrors()
    {
        return $this->errors;
    }


    public function addCourse($tagsID)
    {

        $this->emptyInputCheck($this->title, "The title is required");
        $this->emptyInputCheck($this->category, "Choose a category for the course");
        $this->emptyInputCheck($this->description, "The description should not be empty");
        $this->emptyInputCheck($this->contentType, "Choose a type for the course");
        $this->emptyInputCheck($this->videoContent, "The content is required");
        if(empty($tagsID)){
            array_push($this->errors, "Please add a tag to the course (required)");
        }

        if (empty($this->errors)) {
            $courseStmt = $this->db->prepare("INSERT INTO courses(userID,title,description,categoryID,content_type) values(:userID,:title,:description,:categoryID,:type)");
            $courseStmt->execute([
                ":userID" => $this->teacherID,
                ":title" => $this->title,
                ":description" => $this->description,
                ":categoryID" => $this->category,
                ":type" => $this->contentType
            ]);
            $courseID = $this->db->lastInsertId();
            $contentStmt = $this->db->prepare("INSERT INTO course_video(courseID,course_content) values(:courseID,:content)");
            $contentStmt->execute([
                ":courseID" => $courseID,
                ":content" => $this->videoContent
            ]);

            foreach ($tagsID as $tagID) {
                $tagStmt = $this->db->prepare("INSERT INTO course_tag(courseID,tagID) values(:courseID,:tagID)");
                $tagStmt->execute([
                    ":courseID" => $courseID,
                    ":tagID" => $tagID
                ]);
            }
        }
    }
    public function displayCourse($courseID){
        $stmt = $this->db->prepare("SELECT c.* , cat.category_name , u.username as username , cv.* , c.courseID
                                    FROM courses c
                                    left JOIN category cat on c.categoryID = cat.categoryID
                                    left join users u on c.userID = u.userID
                                    left join course_video cv on cv.courseID = c.courseID
                                    where c.courseID = :courseID
                                    ");
        $stmt->execute([
            ":courseID" => $courseID
        ]);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }
    public function addCourseContent($courseID,$content){
        $stmt = $this->db->prepare("INSERT INTO course_video(courseID,course_content) values(:courseID,:content)");
        $stmt->execute([
            ":courseID" => $courseID ,
            ":content" => $content
        ]);

    }
    public function deleteContent($courseID){
        $stmt = $this->db->prepare("DELETE FROM course_video where courseID = :courseID");
        $stmt->execute([
            ":courseID" => $courseID
        ]);
    }
    public function updateContent($courseID,$content){
        $stmt = $this->db->prepare("UPDATE course_video SET course_content=:content where courseID = :courseID");
        $stmt->execute([
            ":content" => $content ,
            ":courseID" => $courseID
        ]);
    }
      
}
