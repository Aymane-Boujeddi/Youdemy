<?php
require_once "Connect";
class User {

    protected $username;
    protected $email;
    protected $password;
    protected $role;
    protected $status;
    protected $db;
    
    protected $error = [];


    public function __construct($username,$email,$password,$role,$status){
        $this->username = $username;
        $this->email = $email;
        $this->role = $role;
        $this->password = $password;
        $this->status = $status;
        $connection = new Database();
        $this->db = $connection->connect();
    }

    private function emailExists($email){
        if(!empty($email)){

            $stm = $this->db->prepare("SELECT COUNT(*) FROM users WHERE email = :email");
            $stm->execute([
                ':email'=> $email
            ]);
            $stm->execute();
    
            return $stm->fetchColumn() > 0;
        }
       
        
    }
    private function validateInput($input){
        return htmlspecialchars(strip_tags($input));
    }
    private function hashPassword($password){
        return password_hash($password, PASSWORD_DEFAULT);
    }
    public function getErrors(){
        return $this->error;
    }

    public function register(){
        if(empty($this->username) || strlen($this->username) < 5){
            array_push($this->error, "The username should be at least 5 characters long");
        }
        if($this->emailExists($this->email)){
            array_push($this->error, "This email already exists");
        }
        if(empty($this->email) || !filter_var($this->email,FILTER_VALIDATE_EMAIL)){
            array_push($this->error,"Invalid email form");
        }
        if(empty($this->password) || strlen($this->password) < 6){
            array_push($this->error, "Password should contain at least 6 characters");
        }
        
       if(empty($this->error)){
        $stmt = $this->db->prepare("INSERT INTO users(username,email,role,password,user_status) VALUES(:username,:email,:role,:password,:status)");
        $stmt->execute([
            ":username" => $this->validateInput($this->username) ,
            ":email" => $this->validateInput($this->email) , 
            ":role" => $this->role ,
            ":status" => $this->status,
            ":password" => $this->hashPassword($this->password)
        ]);
        
       }

    }
    public function login($email,$password){
        $stmt = $this->db->prepare("SELECT * FROM users where email= :email ");
        $stmt->execute([
            ":email" => $this->validateInput($email)  
        ]);
        
        $userInfo = $stmt->fetch(PDO::FETCH_ASSOC);
        if(empty($userInfo)){
            array_push($this->error , "The email or password isn't correct");
        }else{
            if(password_verify($password,$userInfo['password'])){
                return $userInfo;
            }else{
                array_push($this->error,"The password or the email is not correct");
            }

        }
        
    }

}